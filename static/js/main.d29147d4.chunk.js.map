{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/cards.js","components/Searchbox.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","id","email","className","alt","src","Cardlist","robots","map","robot","i","Searchbox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchvalue","target","value","state","fetch","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"yKAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4BCICQ,EATF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,GAAGC,EAAW,EAAXA,MACtB,OAAQ,sBAAKC,UAAU,yDAAf,UACL,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,KAC9C,sBAAKE,UAAU,KAAf,UACC,6BAAKH,IACL,6BAAKE,WCUKI,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,8BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OAAO,cAAC,EAAD,CAEPT,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,OAHZQ,SCDMC,EALG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,uBAAOC,KAAK,SAASC,YAAY,aAAaX,UAAU,YAAYY,SAAUH,KC6CjEI,E,kDAvCd,aAAc,IAAD,8BACZ,gBAMDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SANzC,EAAKC,MAAQ,CACZhB,OAAQ,GACRa,YAAa,IAJF,E,gEAUQ,IAAD,OACnBI,MAAM,8CACL/B,MAAK,SAAAgC,GAAQ,OAAIA,EAASC,UAC1BjC,MAAK,SAAAkC,GAAK,OAAI,EAAKR,SAAS,CAACZ,OAAQoB,S,+BAM7B,IAAD,OACFpB,EAASqB,KAAKL,MAAMhB,OACpBsB,EAAiBtB,EAAOuB,QAAO,SAAArB,GACpC,OAAOA,EAAMT,KAAK+B,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,kBAEhE,OAAqB,IAAlBxB,EAAO0B,OACF,oBAAI9B,UAAU,KAAd,qBAGN,sBAAKA,UAAU,KAAf,UACC,6CACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKX,iBAC9B,cAAC,EAAD,CAAUV,OAAQsB,W,GAhCNK,aCFlBC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAEhDhD,M","file":"static/js/main.d29147d4.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({name,id,email}) => {\r\n\treturn (<div className=\"robot dib pa2 ma2 br3 bg-light-green grow bw3 shadow-5\">\r\n\t\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}`}/>\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h4>{name}</h4>\r\n\t\t\t\t\t<h5>{email}</h5>\r\n\t\t\t\t</div>\r\n\t\t\t</div>)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst Cardlist = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((robot,i) => {\r\n\t\t\t\treturn <Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email} />\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<input type='search' placeholder='robofriend' className=\"searchbox\" onChange={searchChange} />\r\n\t\t)\r\n}\r\nexport default Searchbox;","import React , {Component} from 'react';\r\nimport Cardlist from '../components/cards';\r\nimport Searchbox from '../components/Searchbox';\r\n/*\r\n\tThe state object is where you store property values that belongs to the component.\r\n\tWhen the state object changes, the component re-renders.\r\n\t///\r\n\tyou can only change the value of state object ex: this.setState({searchvalue: event.target.value})\r\n*/\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchvalue: ''\r\n\t\t}\r\n\t}\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchvalue: event.target.value})\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots: users}))\r\n\t}\r\n\t/*\r\n\t\tThere's arrange for doing smth here constructor comes first then render then componentDidMount and if there's change happend in state it excute render() again got it ?\r\n\t\t\r\n\t*/\r\n\trender() {\r\n\t\tconst robots = this.state.robots;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchvalue.toLowerCase());\r\n\t\t})\r\n\t\t\tif(robots.length === 0){\r\n\t\t\t\treturn <h1 className=\"tc\">Loading</h1>\r\n\t\t\t}else{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t\t\t<Searchbox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t\t<Cardlist robots={filteredRobots} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './containers/index.css';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\nimport App from './containers/App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}